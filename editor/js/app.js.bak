//Global state vars
var db = firebase.database();//Reference to the database
var editorValues;//Collection of all editors
var editorId;//Current editor
var makeNew;//Bool, are we creating a new editor?
var deleted = false;//Has our editor just been deleted?
var keyChanged = false;//Has our key just been changed?


$(function() {
    

    // Get the editor id, using Url.js
    // The queryString method returns the value of the id querystring parameter
    // We default to "_", for users which do not use a custom id.
    editorId = Url.queryString("id") || "PUBLIC";
    document.getElementById("workspaceName").innerHTML = "Workspace: "+editorId;
    if (editorId == "PUBLIC") {
        document.getElementById("prefmodal").remove();            
        document.getElementById("popcan2").remove();
        document.getElementById("popcan3").remove();
        document.getElementById("popcan5").remove();
    }
    makeNew = (Url.queryString("makeNew")=='true')
    var editorKey = Url.queryString("key") || null;
    
    if (editorId!="PUBLIC" && !makeNew){           
        if(editorKey==null){
            editorKey = keygen();
            db.ref("editor_values").child(editorId).child("password").remove();
            db.ref("editor_values").child(editorId).set({
                key: editorKey
            });
            alert("ATTENTION:\r\nAs of November 20th, 2018, workspace passwords have been depreciated in favour of randomly-generated workspace keys. A new key has been generated for this workspace, and it can be found under the gear icon to the left.\r\nThis change was made for security purposes, and none of your workspace contents have been affected by this change.");
            
        }
    }
    if(editorId!="PUBLIC")
        document.getElementById("keyChangeInput").value = editorKey;

    // This is the local storage field name where we store the user theme
    // We set the theme per user, in the browser's local storage
    var LS_THEME_KEY = "editor-theme";

    // This function will return the user theme or the Monokai theme (which
    // is the default)
    function getTheme() {
        return localStorage.getItem(LS_THEME_KEY) || "ace/theme/monokai";
    }

    // Select the desired theme of the editor
    $("#select-theme").change(function () {
        // Set the theme in the editor
        editor.setTheme(this.value);
        
        // Update the theme in the localStorage
        // We wrap this operation in a try-catch because some browsers don't
        // support localStorage (e.g. Safari in private mode)
        try {
            localStorage.setItem(LS_THEME_KEY, this.value);
        } catch (e) {}
    }).val(getTheme());
    
    // Select the desired programming language you want to code in 
    var $selectLang = $("#select-lang").change(function () {
        // Set the language in the Firebase object
        // This is a preference per editor
        currentEditorValue.update({
            lang: this.value
        });
        // Set the editor language
        editor.getSession().setMode("ace/mode/" + this.value);
    });

    // Generate a pseudo user id
    // This will be used to know if it's me the one who updated
    // the code or not
    var uid = Math.random().toString();
    var editor = null;        
    
    // Write the entries in the database 
    editorValues = db.ref("editor_values");        
    
    // Get the current editor reference
    var currentEditorValue = editorValues.child(editorId);        
    
    // Store the current timestamp (when we opened the page)
    // It's quite useful to know that since we will
    // apply the changes in the future only
    var openPageTimestamp = Date.now();
    // Take the editor value on start and set it in the editor
    currentEditorValue.child("content").once("value", function (contentRef) {

        // Somebody changed the lang. Hey, we have to update it in our editor too!
        currentEditorValue.child("lang").on("value", function (r) {
            var value = r.val();
            // Set the language
            var cLang = $selectLang.val();
            if (cLang !== value && value !== null) {
            	//Ensure the language isn't a null value. 
            	//This caused problems with deleting workspaces, as the null value would trigger an update, recreating the workspace with just a lang key.
                $selectLang.val(value).change();
            }
        });            

        // Initialize the ACE editor
        editor = ace.edit("editor");
        editor.setTheme(getTheme());
        editor.$blockScrolling = Infinity;

        // Get the queue reference
        var queueRef = currentEditorValue.child("queue");
        
        // This boolean is going to be true only when the value is being set programmatically
        // We don't want to end with an infinite cycle, since ACE editor triggers the
        // `change` event on programmatic changes (which, in fact, is a good thing)
        var applyingDeltas = false;

        // When we change something in the editor, update the value in Firebase
        editor.on("change", function(e) {
                        
            // In case the change is emitted by us, don't do anything
            // (see below, this boolean becomes `true` when we receive data from Firebase)
            if (applyingDeltas) {
                return;
            }

            // Set the content in the editor object
            // This is being used for new users, not for already-joined users.
            if (editorId != "PUBLIC") {
                currentEditorValue.update({
                    content: editor.getValue()
                });
            }

            // Generate an id for the event in this format:
            //  <timestamp>:<random>
            // We use a random thingy just in case somebody is saving something EXACTLY
            // in the same moment
            if(editorId!="PUBLIC"){
                queueRef.child(Date.now().toString() + ":" + Math.random().toString().slice(2)).set({
                    event: e,
                    by: uid
                }).catch(function(e) {
                    console.error(e);
                });
            }                    
        });

    	// Get the editor document object 

    	var doc = editor.getSession().getDocument();

    	// Listen for updates in the queue
    	queueRef.on("child_added", function (ref) {
        
            // Get the timestamp
            var timestamp = ref.key.split(":")[0];
        
            // Do not apply changes from the past
            if (openPageTimestamp > timestamp) {
                return;
            }
        
            // Get the snapshot value
            var value = ref.val();
            
            // In case it's me who changed the value, I am
            // not interested to see twice what I'm writing.
            // So, if the update is made by me, it doesn't
            // make sense to apply the update
            if (value.by === uid) { return; }
        
            // We're going to apply the changes by somebody else in our editor
            //  1. We turn applyingDeltas on
            applyingDeltas = true;
            //  2. Update the editor value with the event data
            doc.applyDeltas([value.event]);
            //  3. Turn off the applyingDeltas
            applyingDeltas = false;
        });

        // Get the current content
        var val = contentRef.val();
        
        // If an editor with that name doesn't exist already....
        if (val === null) {
            // ...we will initialize a new one. 
            // ...with this content:
            val = "/* Welcome to 404Editor v1.2.1! */\r\n/* Be sure to check your workspace key under \'Preferences,\' you will need it in order to rejoin this workspace in the future. */";
            //...and a random key
            editorKey = keygen();

            // Here's where we set the initial content of the editor
            editorValues.child(editorId).set({
                lang: "javascript",
                queue: {},
                content: val,
                key: editorKey
            });
            
            //Redirect to the editor's page
            location.href="http://www.the404.nl/editor/?id="+editorId+"&key="+editorKey
            //If we're not on the public workspace, show the key in the input box where the user can change it.
            //This box is removed when viewing the public workspace
            if(editorId!="PUBLIC"){
                document.getElementById("keyChangeInput").value = editorKey;
            }
        }
        else{//There is an editor with that name.
        	//Are we trying to join an existing one or make a new one?
            if (!makeNew){
            	//We're trying to join, so we grab the real key for that editor
                var keyLocation = db.ref("editor_values").child(editorId).child("key");
                keyLocation.on("value", function (getKey) {
                	//Check if the inputted key does not match the real one
                    if(editorKey != getKey.val()){ 
                    	//Make sure we're not incorrectly assuming an incorrect key, after a key change or deleting the editor, for instance.        
                        if (editorId != "PUBLIC"&&!keyChanged&&!deleted)
                        {
                        	document.getElementById("editor").remove();//Remove the editor object, so the content can't be viewed before the redirect.
                            alert("Incorrect key!");//Oopsies
                            location.href = "http://www.the404.nl/editor";//Return to the default page 
                        }                            
                    }
                });
            }
            else{
            	//We're trying to make a new one but the name is already taken
            	document.getElementById("editor").remove();//Remove the editor object, so the content can't be viewed before the redirect.
                alert("That name is already in use. Please choose another.");//Too bad
                location.href = "http://www.the404.nl/editor";//Return to the default page
            }               
        }
        // We're going to update the content, so let's turn on applyingDeltas 
        applyingDeltas = true;
        
        // ...then set the value
        // -1 will move the cursor at the begining of the editor, preventing
        // selecting all the code in the editor (which is happening by default)
        editor.setValue(val, -1);
        
        // ...then set applyingDeltas to false
        applyingDeltas = false;

        // Hide the spinner and other loading crap, show the editor and buttons
        $("#loader").fadeOut();
        $("#welcome").fadeOut();
        $("#editor").fadeIn();
        $("#buttons").fadeIn();
        $("#header").fadeIn();
        
        // And finally, focus the editor!       
        editor.focus();
    });    
});

/*Function to delete an existing workspace*/
function delWork(){
	//Gotta check if they're trying to meme on me and delete the public workspace. 
	//The delete button is removed when you're on the public workspace, but we gotta be careful
    if (editorId=="PUBLIC") {
        alert("You can't delete this workspace!");        
    }
    else{
    	//Double check they understand what the trash can symbol means
        if (confirm("Are you sure you want to delete this workspace?\n\nThis cannot be undone.")){            
            deleted = true;//Flag the updater code to not update
            location.href="http://www.the404.nl/editor";//Send the user to the default page
            editorValues.child(editorId).remove();//Remove the editor
        }
    }
}

/*Function to download a workspace*/
function download(){
	/*Save function
		Data = file contents
		filename = the name, dipshit
		type = the extension*/
    function save(data, filename, type) {
        var file = new Blob([data], {type: type});//New file variable (blob?) with the contents and type
        if (window.navigator.msSaveOrOpenBlob) // IE10+
            window.navigator.msSaveOrOpenBlob(file, filename);
        else { // Others
            var a = document.createElement("a");//Creating an a element
   			var url = URL.createObjectURL(file);//Get url to our newly made file
            a.href = url;//Set that as the href of our a tag
            a.download = filename;//Set the download property to our filename
            document.body.appendChild(a);//Add the a tag to the page
            a.click();//Click it
            setTimeout(function() {
                document.body.removeChild(a);//Remove it
                window.URL.revokeObjectURL(url);//Get rid of the url to our file
            }, 0); 
        }
    } 
    /*Function to determine the language, and therefore the correct file extension*/
    function determineLang(){
    	/*Function to determine the selected option in a <select> element. Takes the element as a parameter.*/
        function getSelectedOption(sel) {
            var opt;//To hold the option
            //For loop to go through each option in the select tag
            for ( var i = 0, len = sel.options.length; i < len; i++ ) {
                opt = sel.options[i];//Get option
                if ( opt.selected === true ) {//Check it its the selected one
                    break;//found it
                }
            }
            return opt;//return the correct option
        }
        //Return the id of the selected option
        return getSelectedOption(document.getElementById("select-lang")).id;
        //I painstakingly made the ids of each option correspond to the proper file extension (C# has id '.cs', etc)
    }

    var text = "";//This string will hold the contents of our file
    //Go through each line of the editor, which are separate entities
    $('.ace_line').each(function(){
       text += $(this).text()+"\r\n";//Add the text from that line to our string, and append a newline at the end
    });
    var fullname = editorId + determineLang();//Construct the complete filename from the name of the editor and the file extension
    save(textString, fullname, "txt");//Save the file with our save function. Type is plain text, since that's all these kind of files are
}

/*Function to generate a random key for a workspace*/
function keygen() {
  var text = "";//Empty string to hold our constructed key
  var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";//All possible chars for the key
  for (var i = 0; i < 20; i++)//Max 20 chars to a key
    text += possible.charAt(Math.floor(Math.random() * possible.length));//Add a random character from the possible chars to our string
  return text;//Return our fully constructed key
}

/*Function to change the key to something new*/
function updateKey(){
    keyChanged = true;//Flag to the update code that we're changing the key
    var newKey = document.getElementById("keyChangeInput").value;//Get whatever the user chose as their new key
    db.ref("editor_values").child(editorId).update({//Update the key in the database
        key: newKey
    });
    alert("Key successfully changed!");//Message
    keyChanged = false;//Unset our flag
    location.href="http://www.the404.nl/editor?id="+editorId+"&key="+newKey;//Redirect them to the "new" workspace
}